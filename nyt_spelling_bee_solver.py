from itertools import combinations_with_replacement
import json
import argparse
from datetime import date

parser = argparse.ArgumentParser(description="Solve NYC Spelling Bee puzzle using provided jumble dict.")
parser.add_argument('jumble_dict_json', help='Path to json file containing jumble dict where key is sorted letters and value is resulting words. Ex: "eerst": ["steer", "ester", "reset", "trees"]')
parser.add_argument('puzzle_letters', help='String of letters for the spelling bee puzzle.  The first letter of the string must be the center letter. Ex: RTWFIDO')
parser.add_argument('--output_dir', default='', help='Path to directory to write output to.')
args = parser.parse_args()

def solve_nyc_spelling_bee(puzzle_letters, jumble_dict):
    """
    :param puzzle_letters: string, 7 letters, ex: RWTIDOF
    :param jumble_dict: dict, keys are lists of sorted letters and values are lists of words containing letters, ex: {'iort' : ['riot', 'trio']}
    :return: solution_words, list of string words generated from puzzle letters.
    """
    solution_words = []
    for i in range(4, 12):
        for comb in combinations_with_replacement(puzzle_letters, i):
            if puzzle_letters[0] in comb:
                sorted_comb = ''.join(sorted(comb)).lower()
                unjumbled_words = (sorted_comb, jumble_dict.get(sorted_comb))[1]
                if unjumbled_words:
                    solution_words += unjumbled_words

        solution_words = sorted(set(solution_words),key=len)

    return(solution_words)

def score_spelling_bee_solution(puzzle_letters, solution_words):
    """
    Numerical value of solution words by NYT scoring scheme:
        -Word with 4 letters = 1
        -Word with 5 or more letters: length of word
        -Pangram (word using all 7 puzzle letters): Additional 7 points

        Ex:
            Puzzle letters: RTIWFOD
            Solution words:
                trio
                torrid
                driftwood

                1 + 6 + 16 = 23

    :param puzzle_letters: string, 7 unique puzzle letters
    :param solution_words: list, words generated from puzzle letters by solve_nyc_spelling_bee
    :return: solution_score: int, value generated by list of solution words
    """
    solution_score = 0
    puzzle_letters = set([i for i in puzzle_letters.lower()])

    for word in solution_words:
        if len(word) == 4:
            solution_score += 1

        elif len(word) > 4:
            solution_score += len(word)

            if len(word) >= 7:
                word_letters = set([i for i in word])

                if len(word_letters.intersection(puzzle_letters)) == 7:
                    solution_score += 7

    return solution_score

if __name__ == "__main__":

    puzzle_letters = args.puzzle_letters

    assert len(puzzle_letters) == 7, "Length of provided puzzle letter string must be 7."
    assert puzzle_letters.isalpha(), "Puzzle letter string must include only english alphabet letters."

    with open(args.jumble_dict_json) as f:
        jumble_dict = json.load(f)

    result_words = solve_nyc_spelling_bee(puzzle_letters, jumble_dict)

    print("Puzzle Solution:")
    for word in result_words:
        print(word)

    if args.output_dir:
        today = date.today()
        output_path = '%s/%s.txt' %(args.output_dir, today.strftime('%Y%m%d'))

        print('Writing output to %s' % output_path)

        with open(output_path, 'w') as f:
            f.write('Puzzle Solution:\n')
            for word in result_words:
                f.write('%s\n' % word)